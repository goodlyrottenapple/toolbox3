-- {-# SMT-command ('set-logic 'QF_UFSLIAFS) #-}
-- {-# SMT-log-enabled true #-}
-- {-# SMT-log-level 1 #-}

infixl 1 &&
infix 2 ⊢ , ∈ , ∉, ≡, ⩸, ⩵
infix 3 \\ , \
infixr 3 → , -< , >, ∷, $
infixl 4 ∧, ∨, ;, ∪, ∩


smt-builtin (≡) ['=] : {a : Type} -> a -> a -> Prop end
smt-builtin (∈) [member] : {a : Type} -> a -> Set a -> Prop end
smt-builtin (∪) [union] : {a : Type} -> Set a -> Set a -> Set a end
smt-builtin (∩) [intersection] : {a : Type} -> Set a -> Set a -> Set a end
smt-builtin (\) [setminus] : {a : Type} -> Set a -> Set a -> Set a end
smt-builtin singleton [singleton] : {a : Type} -> a -> Set a end

smt-builtin (&&) [and] : Prop -> Prop -> Prop end
smt-builtin ¬ [not] : Prop -> Prop end

smt-def (∉) : {a : Type} -> (x : a) -> (X : Set a) -> Prop where
  ('not ('member x X))
end

smt-def (\\) : {a : Type} -> (X : Set a) -> (x : a) -> Set a where 
  ('setminus X ('singleton x))
end

smt-def infer : {a : Type} -> (x : a) -> Prop where 
  ('= x x)
end

data Nat : * where
    0 : Nat |
    Suc : Nat -> Nat
end


data Vec : Type -> Nat -> Type where
  NilV : {a : Type} -> Vec a 0 |
  ConsV : {a : Type} -> {n : Nat} -> a -> Vec a n -> Vec a (Suc n)
end

language LaTeX


translation Vec to LaTeX where
  NilV -> '''\varempty''' |
  ConsV a v -> "\cons{#a}{#v}"
end

data List : Set Name -> (Set Name -> *) -> * where
    ∅ : -- {𝓝 : Set Name} -> [infer 𝓝] -> -- this is a bit of a hack to force the SMT solver to come up with X automatically
        {τ : Set Name -> *} -> List {| |} τ
  | (∷) : {X : Set Name} -> {Y : Set Name} -> {Z : Set Name} -> {τ : Set Name -> *} -> 
        (x : τ X) -> List Y τ -> [Z ≡ X ∪ Y] -> List Z τ
end

translation List to LaTeX where
    ∅ -> ""
  | (∷) x xs -> "#{x} , #{xs}"
end

data Trm : Set Name -> * where 
    var : {𝓝 : Set Name} -> (n : Name) -> [n ∈ 𝓝] -> Trm 𝓝
  | const : {𝓝 : Set Name} -> Name -> Trm 𝓝
  | fun : {𝓝 : Set Name} -> Name -> List 𝓝 Trm -> Trm 𝓝
end

def empty : List {| |} Trm where
  ∅
end


data SubstList : Set Name -> Set Name -> (Set Name -> *) -> * where
    Nil : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> {τ : Set Name -> *} -> SubstList 𝓝 𝓝₂ τ
  | Cons : {𝓝 : Set Name} -> 
        {𝓝₁₁ : Set Name} -> {𝓝₂₁ : Set Name} -> 
        {𝓝₁₂ : Set Name} -> {𝓝₂₂ : Set Name} -> 
        {τ : Set Name -> *} ->
        (x : Name) -> 
        -- [ x ∉ 𝓝 && x ∉ 𝓝₁₁ && x ∉ 𝓝₂₁ ] -> 
        [ x ∉ 𝓝 && x ∉ 𝓝₁₁ ] -> 
        (s : τ 𝓝) -> SubstList 𝓝₁₁ 𝓝₂₁ τ -> 
        [𝓝₁₂ ≡ 𝓝₁₁ ∪ (singleton x) && 𝓝₂₂ ≡ 𝓝₂₁ ∪ 𝓝] -> 
        SubstList 𝓝₁₂ 𝓝₂₂ τ
end


data F : Set Name -> * where
    R : Name -> {𝓝 : Set Name} -> List 𝓝 Trm -> F 𝓝
  | (⩵) : {𝓝 : Set Name} -> Trm 𝓝 -> Trm 𝓝 -> F 𝓝
  | ⊤ : {𝓝 : Set Name} -> F 𝓝
  | ⊥ : {𝓝 : Set Name} -> F 𝓝
  | (∧) : {𝓝 : Set Name} -> F 𝓝 -> F 𝓝 -> F 𝓝
  | (∨) : {𝓝 : Set Name} -> F 𝓝 -> F 𝓝 -> F 𝓝
  | (→) : {𝓝 : Set Name} -> F 𝓝 -> F 𝓝 -> F 𝓝
  | (-<) : {𝓝 : Set Name} -> F 𝓝 -> F 𝓝 -> F 𝓝
  | ∀ : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> (x : Name) -> [ x ∈ 𝓝 ] -> F 𝓝 -> [ 𝓝₂ ≡ 𝓝 \\ x ] -> F 𝓝₂
  | ∃ : (x : Name) -> {𝓝 : Set Name} -> [ x ∈ 𝓝 ] -> F 𝓝 -> {𝓝₂ : Set Name} -> [ 𝓝₂ ≡ 𝓝 \\ x ] -> F 𝓝₂
  | ∘ : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> (x : Name) -> [ x ∉ 𝓝 ] -> F 𝓝 -> [ 𝓝₂ ≡ 𝓝 ∪ (singleton x) ] -> F 𝓝₂
  | subst : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> SubstList 𝓝 𝓝₂ Trm -> F 𝓝 -> F 𝓝₂
end

translation F to LaTeX where
    R n lst -> "#{n}(#{lst})"
  | (⩵) a b -> "#{a} = #{b}"
  | ⊤ -> "\top"
  | ⊥ -> "\bot"
  | (∧) a b -> "#{a} \wedge #{b}"
  | (∨) a b -> "#{a} \vee #{b}"
  | (→) a b -> "#{a} \to #{b}"
  | ∀ x a -> "\forall #{x}.\,#{a}"
  | ∘ x a -> "\sub{\circ}{\!#{x}} #{a}"
end

data S : Set Name -> * where
    ↑ : {𝓝 : Set Name} -> F 𝓝 -> S 𝓝
  | Ieq : {𝓝 : Set Name} -> Trm 𝓝 -> Trm 𝓝 -> S 𝓝
  | I : {𝓝 : Set Name} -> S 𝓝
  | IR : Name -> {𝓝 : Set Name} -> List 𝓝 Trm -> S 𝓝
  | (;) : {𝓝 : Set Name} -> S 𝓝 -> S 𝓝 -> S 𝓝
  | (>) : {𝓝 : Set Name} -> S 𝓝 -> S 𝓝 -> S 𝓝
  
  | Q : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> (x : Name) -> [ x ∈ 𝓝 ] -> S 𝓝 -> [ 𝓝₂ ≡ 𝓝 \\ x ] -> S 𝓝₂
  | ⊙ : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> (x : Name) -> [ x ∉ 𝓝 ] -> S 𝓝 -> [ 𝓝₂ ≡ 𝓝 ∪ (singleton x) ] -> S 𝓝₂
  | substS : {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> SubstList 𝓝₂ 𝓝₂ Trm -> S 𝓝 -> S 𝓝₂
end


translation S to LaTeX where
    ↑ f -> "#{f}"
  | I -> "\mathbb{I}"
  | IR n lst -> "\bf{#{n}}(#{lst})"
  | (;) s t -> "#{s} ; #{t}"
  | (>) s t -> "#{s} > #{t}"
  | Q x s -> "\bf{Q}#{x}.\,#{s}"
  | ⊙ x s -> "\sub{\bigcirc}{\!#{x}} #{s}"

end


data (⊢) : {𝓝 : Set Name} -> S 𝓝 -> S 𝓝 -> Type where
  IdIR    : {r : Name} -> {𝓝 : Set Name} -> {ts : List 𝓝 Trm} -> 

            --------------------
            IR r ts ⊢ ↑ (R r ts) 
  |
  AllR    : {𝓝ₓ : Set Name} -> {𝓝ₐ : Set Name} -> 
            {X : S 𝓝ₓ} -> {x : Name} -> {A : F 𝓝ₐ} -> 

          X ⊢ Q x (↑ A) ->
          -------------
          X ⊢ ↑ (∀ x A)
  | 
  Q⊙Disp  : {𝓝ₓ : Set Name} -> {𝓝ᵧ : Set Name} -> 
            {X : S 𝓝ₓ} -> {Y : S 𝓝ᵧ} -> {x : Name} ->

            Y ⊢ Q x X ->
            ---------
            ⊙ x Y ⊢ X
  | 
  Q⊙Disp2 : {𝓝ₓ : Set Name} -> {𝓝ᵧ : Set Name} -> 
            {X : S 𝓝ₓ} -> {Y : S 𝓝ᵧ} -> {x : Name} ->

            (⊙ x Y) ⊢ X ->
            -----------
            Y ⊢ (Q x X)
  | 
  ∘R :     {𝓝ₓ : Set Name} -> {𝓝ₐ : Set Name} -> 
         {X : S 𝓝ₓ} -> {x : Name} -> {A : F 𝓝ₐ} -> 

           X ⊢ ⊙ x (↑ A) ->
           -------------
           X ⊢ ↑ (∘ x A)
  | 
  ⊙mon :   {𝓝 : Set Name} -> {𝓝₂ : Set Name} -> 
           {X : S 𝓝} -> {Y : S 𝓝} -> {x : Name} ->

                  X ⊢ Y -> 
         -----------------------
         ⊙ {𝓝} {𝓝₂} x X ⊢ ⊙ x Y
  | 
  IRL :    {r : Name} -> {𝓝 : Set Name} -> 
           {X : S 𝓝} -> {ts : List 𝓝 Trm} -> 

         IR r ts ⊢ X ->
         --------------
         ↑ (R r ts) ⊢ X
end


translation (⊢) to LaTeX where
    IdIR : x ⊢ y -> "\AXC{}\RightLabel{$\sub{Id}{\mathbb{I}R}$}\n\UIC{$#{x} \vdash #{y}$}"
  | AllR p : x ⊢ y -> "#{p}\RightLabel{$\sub{\forall}{R}$}\n\UIC{$#{x} \vdash #{y}$}"
  | Q⊙Disp2 p : x ⊢ y -> "#{p}\RightLabel{(Q/⊙)}\n\UIC{$#{x} \vdash #{y}$}"
  | ∘R p : x ⊢ y -> "#{p}\RightLabel{$\sub{∘}{R}$}\n\UIC{$#{x} \vdash #{y}$}"
  | ⊙mon p : x ⊢ y -> "#{p}\RightLabel{⊙mon}\n\UIC{$#{x} \vdash #{y}$}"
  | IRL p : x ⊢ y -> "#{p}\RightLabel{$\sub{\mathbb{I} R}{L}$}\n\UIC{$#{x} \vdash #{y}$}"
end


def lemma : ↑(R 'f ∅) ⊢ ↑(∀ 'x (∘ 'x (R 'f ∅))) where
    (AllR (Q⊙Disp2 (∘R (⊙mon (IRL IdIR)))))
end

translate lemma to LaTeX where
  output = "./out.tex"
end

-- translate lemma to JSON where
--   output = "./out.tex"
-- end
